<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	
	<!-- 
	<aop:config> : AOP 설정 정보임을 나타냄
	<aop:aspect> : 애스펙트를 설정한다
	<aop:around pointcut="execution()"> : Around 어드바이스와 포인트컷을 설정한다.	 
	
	<aop:aspect> 태그의 ref 속성은 애스팩트로서 기능을 제공할 Bean을 설정할 때 사용
	<aop:around> 태그의 pointcut 속성의 execution 지시자(designator)는 
	어드바이스를 적용할 패키지, 클래스, 메서드를 표현할 때 사용됨
	
	myspring.user.service 패키지 및 그 하위 패키지에 있는 모든 public 메서드를 포인트컷으로 호출
	
	UserServiceImpl의 public 메서드가 호출될 때 PerformanceTraceAdvice Bean의 
	trace()라는 메소드가 호출 되도록 설정
	
	execution() 지시자를 사용한 포인트컷 문법
	execution([접근제한자 페턴(생략가능)]타입패턴[][타입페턴.]이름패턴 (타입패턴"..",...))
	execution(* 패키지.클래스.메소드. (..파라미터))
	
	어드바이스와 포인트컷 설정 ex)
	execution(* hello(..))
	- hello라는 이름을 가진 메서드를 선정하는 것이다. 파라미터는 모든 종류를 다 허용한다.

	execution(* hello())
	- 파라미터 패턴이 ()로 되어 있으니 hello 메서드 중에서 파라미터가 없는 것만 선택한다.
	
	execution(* myspring.user.service.*.*(..))
	- myspring.user.service 패키지의 모든 클래스에 적용된다. 하지만 서브패키지의 클래스는 포함되지 않는다.
	
	execution(* myspring.user.service..*.*(..))
	- myspring.user.service 패키지의 모든 클래스에 적용된다. 그리고 '..' 를 사용해서 서브패키지의 모든 클래스까지 포함한다.

	execution(* *..Target.*(..))
	- 패키지에 상관없이 Target 이라는 이름의 모든 클래스에 적용된다. 다른 패키지에 같은 이름의 클래스가 있어도 적용이 된다는 점에 유의해야 함.
	-->
	
<!-- AOP 설정 -->
	<aop:config>
		<aop:aspect id="traceAspect" ref="performancdTraceAdvice">
			<aop:around pointcut="execution(public * myspring.user.service..*(..))" method="trace" />
		</aop:aspect>
	</aop:config>
	
	<!-- Advice 클래스를 Bean으로 등록 -->
	<bean id="performancdTraceAdvice" class="myspring.aop.xml.PreformanceTraceAdvice" />
	
</beans>